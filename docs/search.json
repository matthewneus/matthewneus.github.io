[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/test-post/index.html",
    "href": "posts/test-post/index.html",
    "title": "First Post!",
    "section": "",
    "text": "This is my first post to this site. Here’s some code:\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nattendance &lt;- read.csv(\"https://dwillis.github.io/sports-data-files/attendance.csv\")"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sportsblog",
    "section": "",
    "text": "Maryland’s superior points earned results in worse conference record than UCLA\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 10, 2024\n\n\nMatthew Neus\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland football runs on average the most offensive plays in new-look Big Ten\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 8, 2024\n\n\nMatthew Neus\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nOct 1, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nFirst Post!\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 1, 2024\n\n\nMatthew Neus\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 28, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/big-ten-average-offensive-plays/index.html",
    "href": "posts/big-ten-average-offensive-plays/index.html",
    "title": "Maryland football runs on average the most offensive plays in new-look Big Ten",
    "section": "",
    "text": "Here I loaded in both data sets for the entire 2023 college football season and the available data for the current 2024 season.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\ncfb23 &lt;- read.csv(\"https://thescoop.org/sports-data-files/footballlogs23.csv\")\ncfb24 &lt;- read.csv(\"https://thescoop.org/sports-data-files/footballlogs24.csv\")\n\n\nLooking at the 2023 data, I wanted to look at just Big Ten teams and the average offensive plays they ran during the year. I grouped the data by each team, found the mean of each team’s total offensive plays ran, and then filtered the data to just include Big Ten teams.\nFrom there, I arranged the data to see the team that averaged the most offensive plays, sorted the data to just show that average and the team, and used “distinct()” to get rid of any duplicate data.\n\n\nCode\ncfb23 &lt;- cfb23 |&gt;\n  group_by(Team) |&gt;\n  mutate(\n    avg_off_plays = mean(OffensivePlays)\n  ) |&gt;\n  filter(Conference == 'Big Ten Conference')\n\nbigten23 &lt;- cfb23 |&gt;\n  arrange(desc(avg_off_plays)) |&gt;\n  select(Team, avg_off_plays) |&gt;\n  distinct()\n\n\nI followed the same steps steps I did for the 2023 data for the 2024 data, even though the season is still happening.\n\n\nCode\ncfb24 &lt;- cfb24 |&gt;\n  group_by(Team) |&gt;\n  mutate(\n    avg_off_plays = mean(OffensivePlays)\n  ) |&gt;\n  filter(Conference == 'Big Ten Conference')\n\nbigten24 &lt;- cfb24 |&gt;\n  arrange(desc(avg_off_plays)) |&gt;\n  select(Team, avg_off_plays) |&gt;\n  distinct()\n\n\nHere is a bar chart that shows the average of offensive plays each team ran in 2023. I used the team name as my x-axis and the average number of offensive plays for my y-axis. I weighted the bar chart by the average offensive plays and arranged it to show a rise from the team with the lowest average of offensive plays to the most.\n\n\nCode\nggplot() +\n  geom_bar(\n    data=bigten23, \n    aes(\n      x=reorder(Team, avg_off_plays), \n      weight=avg_off_plays\n      )\n  )\n\n\n\n\n\n\n\n\n\nI followed the same steps I did for the 2023 data for the 2024 data, even though the season is still happening.\n\n\nCode\nggplot() + \n  geom_bar(\n    data=bigten24, \n    aes(\n      x=reorder(Team, avg_off_plays), \n      weight=avg_off_plays\n      )\n    )\n\n\n\n\n\n\n\n\n\n– Maryland’s offense is on the field for more plays than any other Big Ten team so far in 2024. The Terps averaged around 72 offensive plays per game through five games, up from their average of 66 offensive plays throughout the entire 2023 season. Maryland’s has played an FCS school and a non-power five school during its first five games of 2024, which may be aiding the increase of offensive possessions.\nPurdue’s offense has underwent one of the worst xx in the Big Ten so far in 2024. The Boilermakers ranked second in 2023 for average offensive plays, but rank last so far in 2024 through five games."
  },
  {
    "objectID": "posts/big-ten-volleyball-points/index.html",
    "href": "posts/big-ten-volleyball-points/index.html",
    "title": "Maryland’s superior points earned results in worse conference record than UCLA",
    "section": "",
    "text": "UCLA has fared better in its first five games against Big Ten competition than Maryland has, despite the Bruins scoring less points than the Terps.\nMaryland has benefited from more points won courtesy of its attack, in kills and aces, and has been gifted more points from its opponents own errors compared to UCLA. But, the Bruins have began life in the Big Ten with two wins to the Terps’ one.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nHere I loaded volleyball data for every team so far this season.\n\n\nCode\nvolleyball24 &lt;- read.csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2024.csv\")\n\n\nI filtered the data to just see Maryland’s stats through its first 15 games. I then added the total number of kills, blocks, aces and opponent errors to see how many points the Terps have won so far.\n\n\nCode\nmd24 &lt;- volleyball24 |&gt;\n  filter(team == 'Maryland')\n\nmd24 |&gt;\n  summarise(\n    totalkills = sum(kills),\n    totalblocks = sum(block_solos + block_assists),\n    totalaces = sum(aces),\n    totalopponenterrors = sum(defensive_errors)\n  )\n\n\n  totalkills totalblocks totalaces totalopponenterrors\n1        714         253       127                 323\n\n\nI did the same filtering and adding with UCLA, a Big Ten newcomer, to see how one of the conference’s newest additions is faring so far.\n\n\nCode\nucla24 &lt;- volleyball24 |&gt;\n  filter(team == 'UCLA')\n\nucla24 |&gt;\n  summarise(\n    totalkills = sum(kills),\n    totalblocks = sum(block_solos + block_assists),\n    totalaces = sum(aces),\n    totalopponenterrors = sum(defensive_errors)\n  )\n\n\n  totalkills totalblocks totalaces totalopponenterrors\n1        724         232        69                 281\n\n\nI wanted to make a waffle chart to compare the amount of points won by Maryland and UCLA. To do so, I had to load the waffle library in order to make these charts.\n\n\nCode\nlibrary(waffle)\n\n\nI combined the totals for kills, aces and blocks for both teams. I did this because these are the points that each team earns for itself. I then added the total number of opponent errors each team, as these are points both team’s have been awarded for the mistakes of their opponents.\n\n\nCode\nmd &lt;- c(\"Kills, Aces, Blocks\"=1094, \"Opponent Errors\"=323)\nucla &lt;- c(\"Kills, Aces, Blocks\"=933, \"Opponent Errors\"=261, 233)\n\n\nThis is where I made the waffle charts. I put both waffle charts in an “iron” so I could see both side by side. I divided both vectors, the Maryland and UCLA data, by four so the data would display properly. The amount of points Maryland won through kills, aces and blocks is in red, while their opponents errors are in black. Same for UCLA, except I used light blue for their points won. These waffle charts so that Maryland has been awarded more points than UCLA.\nMaryland has won 1094 points from kills, aces and blocks, and 323 from opponent errors for 1,417 total points. UCLA has only won 933 points from kills, aces and blocks, and 261 from opponent errors for 1,194 points, 233 fewer points than the Terps.\n\n\nCode\niron(\n  waffle(md/4,\n         rows = 10,\n         title = \"Maryland's Points Earned\",\n         xlab = \"1 square = 1 point\",\n         colors = c(\"red\", \"black\")\n  ),\n  waffle(ucla/4,\n         rows = 10,\n         title = \"UCLA's Points Earned\",\n         xlab = \"1 square = 1 point\",\n         colors = c(\"lightblue\", \"black\", \"white\")\n  )\n)\n\n\n\n\n\n\n\n\n\nMaryland won more than 200 points over UCLA so far this season, yet both teams have similar overall records and the Bruins have one more win than the Terps in conference play. Earning points is one way teams win more volleyball matches than they lose, but Maryland hasn’t done a good job at turning its points earned into wins."
  }
]