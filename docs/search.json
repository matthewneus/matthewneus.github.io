[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/test-post/index.html",
    "href": "posts/test-post/index.html",
    "title": "First Post!",
    "section": "",
    "text": "This is my first post to this site. Here’s some code:\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nattendance &lt;- read.csv(\"https://dwillis.github.io/sports-data-files/attendance.csv\")"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sportsblog",
    "section": "",
    "text": "Running on 3rd and Six Doesn’t Lead to First Downs\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 16, 2024\n\n\nMatthew Neus\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland’s superior points earned results in worse conference record than UCLA\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 10, 2024\n\n\nMatthew Neus\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland football runs on average the most offensive plays in new-look Big Ten\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 8, 2024\n\n\nMatthew Neus\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nOct 1, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nFirst Post!\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\nOct 1, 2024\n\n\nMatthew Neus\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 28, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/big-ten-average-offensive-plays/index.html",
    "href": "posts/big-ten-average-offensive-plays/index.html",
    "title": "Maryland football runs on average the most offensive plays in new-look Big Ten",
    "section": "",
    "text": "Here I loaded in both data sets for the entire 2023 college football season and the available data for the current 2024 season.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\ncfb23 &lt;- read.csv(\"https://thescoop.org/sports-data-files/footballlogs23.csv\")\ncfb24 &lt;- read.csv(\"https://thescoop.org/sports-data-files/footballlogs24.csv\")\n\n\nLooking at the 2023 data, I wanted to look at just Big Ten teams and the average offensive plays they ran during the year. I grouped the data by each team, found the mean of each team’s total offensive plays ran, and then filtered the data to just include Big Ten teams.\nFrom there, I arranged the data to see the team that averaged the most offensive plays, sorted the data to just show that average and the team, and used “distinct()” to get rid of any duplicate data.\n\n\nCode\ncfb23 &lt;- cfb23 |&gt;\n  group_by(Team) |&gt;\n  mutate(\n    avg_off_plays = mean(OffensivePlays)\n  ) |&gt;\n  filter(Conference == 'Big Ten Conference')\n\nbigten23 &lt;- cfb23 |&gt;\n  arrange(desc(avg_off_plays)) |&gt;\n  select(Team, avg_off_plays) |&gt;\n  distinct()\n\n\nI followed the same steps steps I did for the 2023 data for the 2024 data, even though the season is still happening.\n\n\nCode\ncfb24 &lt;- cfb24 |&gt;\n  group_by(Team) |&gt;\n  mutate(\n    avg_off_plays = mean(OffensivePlays)\n  ) |&gt;\n  filter(Conference == 'Big Ten Conference')\n\nbigten24 &lt;- cfb24 |&gt;\n  arrange(desc(avg_off_plays)) |&gt;\n  select(Team, avg_off_plays) |&gt;\n  distinct()\n\n\nHere is a bar chart that shows the average of offensive plays each team ran in 2023. I used the team name as my x-axis and the average number of offensive plays for my y-axis. I weighted the bar chart by the average offensive plays and arranged it to show a rise from the team with the lowest average of offensive plays to the most.\n\n\nCode\nggplot() +\n  geom_bar(\n    data=bigten23, \n    aes(\n      x=reorder(Team, avg_off_plays), \n      weight=avg_off_plays\n      )\n  )\n\n\n\n\n\n\n\n\n\nI followed the same steps I did for the 2023 data for the 2024 data, even though the season is still happening.\n\n\nCode\nggplot() + \n  geom_bar(\n    data=bigten24, \n    aes(\n      x=reorder(Team, avg_off_plays), \n      weight=avg_off_plays\n      )\n    )\n\n\n\n\n\n\n\n\n\n– Maryland’s offense is on the field for more plays than any other Big Ten team so far in 2024. The Terps averaged around 72 offensive plays per game through five games, up from their average of 66 offensive plays throughout the entire 2023 season. Maryland’s has played an FCS school and a non-power five school during its first five games of 2024, which may be aiding the increase of offensive possessions.\nPurdue’s offense has underwent one of the worst xx in the Big Ten so far in 2024. The Boilermakers ranked second in 2023 for average offensive plays, but rank last so far in 2024 through five games."
  },
  {
    "objectID": "posts/big-ten-volleyball-points/index.html",
    "href": "posts/big-ten-volleyball-points/index.html",
    "title": "Maryland’s superior points earned results in worse conference record than UCLA",
    "section": "",
    "text": "UCLA has fared better in its first five games against Big Ten competition than Maryland has, despite the Bruins scoring less points than the Terps.\nMaryland has benefited from more points won courtesy of its attack, in kills and aces, and has been gifted more points from its opponents own errors compared to UCLA. But, the Bruins have began life in the Big Ten with two wins to the Terps’ one.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nHere I loaded volleyball data for every team so far this season.\n\n\nCode\nvolleyball24 &lt;- read.csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2024.csv\")\n\n\nI filtered the data to just see Maryland’s stats through its first 15 games. I then added the total number of kills, blocks, aces and opponent errors to see how many points the Terps have won so far.\n\n\nCode\nmd24 &lt;- volleyball24 |&gt;\n  filter(team == 'Maryland')\n\nmd24 |&gt;\n  summarise(\n    totalkills = sum(kills),\n    totalblocks = sum(block_solos + block_assists),\n    totalaces = sum(aces),\n    totalopponenterrors = sum(defensive_errors)\n  )\n\n\n  totalkills totalblocks totalaces totalopponenterrors\n1        714         253       127                 323\n\n\nI did the same filtering and adding with UCLA, a Big Ten newcomer, to see how one of the conference’s newest additions is faring so far.\n\n\nCode\nucla24 &lt;- volleyball24 |&gt;\n  filter(team == 'UCLA')\n\nucla24 |&gt;\n  summarise(\n    totalkills = sum(kills),\n    totalblocks = sum(block_solos + block_assists),\n    totalaces = sum(aces),\n    totalopponenterrors = sum(defensive_errors)\n  )\n\n\n  totalkills totalblocks totalaces totalopponenterrors\n1        724         232        69                 281\n\n\nI wanted to make a waffle chart to compare the amount of points won by Maryland and UCLA. To do so, I had to load the waffle library in order to make these charts.\n\n\nCode\nlibrary(waffle)\n\n\nI combined the totals for kills, aces and blocks for both teams. I did this because these are the points that each team earns for itself. I then added the total number of opponent errors each team, as these are points both team’s have been awarded for the mistakes of their opponents.\n\n\nCode\nmd &lt;- c(\"Kills, Aces, Blocks\"=1094, \"Opponent Errors\"=323)\nucla &lt;- c(\"Kills, Aces, Blocks\"=933, \"Opponent Errors\"=261, 233)\n\n\nThis is where I made the waffle charts. I put both waffle charts in an “iron” so I could see both side by side. I divided both vectors, the Maryland and UCLA data, by four so the data would display properly. The amount of points Maryland won through kills, aces and blocks is in red, while their opponents errors are in black. Same for UCLA, except I used light blue for their points won. These waffle charts so that Maryland has been awarded more points than UCLA.\nMaryland has won 1094 points from kills, aces and blocks, and 323 from opponent errors for 1,417 total points. UCLA has only won 933 points from kills, aces and blocks, and 261 from opponent errors for 1,194 points, 233 fewer points than the Terps.\n\n\nCode\niron(\n  waffle(md/4,\n         rows = 10,\n         title = \"Maryland's Points Earned\",\n         xlab = \"1 square = 1 point\",\n         colors = c(\"red\", \"black\")\n  ),\n  waffle(ucla/4,\n         rows = 10,\n         title = \"UCLA's Points Earned\",\n         xlab = \"1 square = 1 point\",\n         colors = c(\"lightblue\", \"black\", \"white\")\n  )\n)\n\n\n\n\n\n\n\n\n\nMaryland won more than 200 points over UCLA so far this season, yet both teams have similar overall records and the Bruins have one more win than the Terps in conference play. Earning points is one way teams win more volleyball matches than they lose, but Maryland hasn’t done a good job at turning its points earned into wins."
  },
  {
    "objectID": "posts/third-and-six/index.html",
    "href": "posts/third-and-six/index.html",
    "title": "Running on 3rd and Six Doesn’t Lead to First Downs",
    "section": "",
    "text": "When Maryland attempted to pick up six or more yards late in the fourth quarter against Illinois in 2023, some defended coach Michael Locksley’s decision because of the success the Terps had on the ground against the Illini. The Terps didn’t convert on the 3rd down try, and ended up losing to Illinois.\nMaryland’s track record when rushing on 3rd and six in Lockley’s tenure suggested that a passing play would have had a better chance at a conversion. The Terps routinely struggle to move the chains when running on 3rd and six, and much of the Big Ten share similar struggles.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(cfbfastR)\n\n\nHere we load the play-by-play data for the complete season’s from 2019-2023, and all the games played so far in 2024.\n\n\nCode\npbp_data &lt;- load_cfb_pbp(\n  seasons = c(2019, 2020, 2021, 2022, 2023, 2024)\n)\n\n\nFrom that data, I filtered the data to only show plays that were ran on 3rd and six. From 2019-2024, there were 15,661 plays ran in college football on 3rd and six.\n\n\nCode\nthird_and_six &lt;- pbp_data |&gt;\n  filter(\n    down == \"3\",\n    distance == \"6\"\n  )\n\n\nFrom those plays, there were 22 different play types that occurred. 3,173 were rushes and 135 were rushing touchdowns. The most common play ran on 3rd and six were passes that ended in completion, followed by passes ending in incompletions.\n\n\nCode\nthird_and_six_play_types &lt;- third_and_six |&gt;\n  group_by(play_type) |&gt;\n  summarise(\n    total = n()\n  )\n\n\nOf those 3,308 total runs on 3rd and six, teams only rushed on that down and distance 21 percent of the time.\n\n\nCode\nthird_and_six_play_types |&gt;\n  mutate(\n    percentage = total / 15661 * 100\n  ) |&gt;\n  arrange(desc(percentage))\n\n\n# A tibble: 22 × 3\n   play_type                  total percentage\n   &lt;chr&gt;                      &lt;int&gt;      &lt;dbl&gt;\n 1 Pass Reception              4676     29.9  \n 2 Pass Incompletion           3866     24.7  \n 3 Rush                        3173     20.3  \n 4 Penalty                     1068      6.82 \n 5 Timeout                      929      5.93 \n 6 Sack                         800      5.11 \n 7 Passing Touchdown            496      3.17 \n 8 Interception Return          257      1.64 \n 9 Rushing Touchdown            135      0.862\n10 Fumble Recovery (Opponent)   101      0.645\n# ℹ 12 more rows\n\n\nOf the 3,308 running plays that occured on 3rd and six, team’s average a gain of just over six yards.\n\n\nCode\nthird_and_six_rushes &lt;- third_and_six |&gt;\n  filter(play_type == \"Rush\" | play_type == \"Rushing Touchdown\")\n\nthird_and_six_rushes |&gt;\n  summarise(\n    avg_yds_gained = mean(yards_gained)\n  )\n\n\n# A tibble: 1 × 1\n  avg_yds_gained\n           &lt;dbl&gt;\n1           6.17\n\n\nNavy, Army and Air Force led Division I in run plays on 3rd and six, which was expected from the service academies. Georgia Southern and Ole Miss rounded out the top five as the most run-heavy teams on that specific down and distance. Maryland, from 2019-2024, has only ran 17 run plays on 3rd and six.\n\n\nCode\nthird_and_six_rushes |&gt;\n  group_by(pos_team) |&gt;\n  summarise(\n    total = n()\n  ) |&gt;\n  arrange(desc(total))\n\n\n# A tibble: 280 × 2\n   pos_team         total\n   &lt;chr&gt;            &lt;int&gt;\n 1 Navy                59\n 2 Army                51\n 3 Air Force           42\n 4 Georgia Southern    34\n 5 Ole Miss            31\n 6 Kent State          30\n 7 New Mexico          30\n 8 Baylor              29\n 9 Louisiana           29\n10 Georgia Tech        28\n# ℹ 270 more rows\n\n\nMaryland’s 17 rushes on 3rd and six have primarily come before the 2024 season. The Terps have only run once on a 3rd and six so far this season, which came in the second quarter against UConn when they were already up 14-0. Maryland failed to convert the third down try, and haven’t tried running from six yards on 3rd down since.\nThat run has been the only rush on 3rd and six since Maryland’s decision to run it late against Illinois in 2023, which they ended up losing a yard on and ultimately the game.\n\n\nCode\nthird_and_six_rushes_maryland &lt;- third_and_six_rushes |&gt;\n  filter(pos_team == \"Maryland\")\n\nthird_and_six_rushes_maryland_suc &lt;- third_and_six_rushes_maryland |&gt;\n  mutate(\n    conversionyes = yards_gained &gt; \"6\",\n    conversionno = yards_gained &lt;= \"6\",\n  ) |&gt;\n  summarise(\n    ConversionsSuccessful = sum(conversionyes),\n    ConversionsFailed = sum(conversionno),\n    team = pos_team\n  ) -&gt; firstdowns\n\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n\n\nCode\nfirstdowns |&gt;\n  pivot_longer(\n    cols = starts_with(\"conversions\"),\n    names_to = \"convert\",\n    values_to = \"first\"\n  ) -&gt; firstdownrate\n\n\nLooking at the data from 2019 to this season, Maryland ran the ball on 3rd and six 17 times. Seeing how often they convert these opportunies for first downs, I mutated the data to say the Terps converted the third down chance if they gained more than six yards, or they failed if they gained six yards or less. They failed to convert the 3rd and six 13 different times.\n\n\nCode\nlibrary(scales)\n\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nCode\nggplot() +\n  geom_bar(\n    data = firstdownrate,\n    aes(x=team, weight = first, fill = convert)\n  ) +\n  coord_flip() + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"Maryland's Success Running on 3rd and Six\", \n)\n\n\n\n\n\n\n\n\n\nI’ve opted to not include the four new members of the Big Ten in 2024 because they would only add data for this season’s games so far. I’m including the 14 teams that have been in the Big Ten since 2019.\n\n\nCode\nbigten &lt;- c(\"Indiana\", \"Michigan\", \"Ohio State\", \"Penn State\", \"Maryland\", \"Rutgers\", \"Michigan State\", \"Iowa\", \"Northwestern\", \"Wisconsin\", \"Illinois\", \"Minnesota\", \"Nebraska\", \"Purdue\")\n\n\n\n\nCode\nthird_and_six_rushes_b1g&lt;- third_and_six_rushes |&gt;\n  filter(pos_team %in% bigten)\n\n\n\n\nCode\nthird_and_six_rushes_b1g_suc &lt;- third_and_six_rushes_b1g |&gt;\n  mutate(\n    conversionyes = yards_gained &gt; \"6\",\n    conversionno = yards_gained &lt;= \"6\",\n  ) |&gt; group_by(pos_team) |&gt;\n  summarise(\n    ConversionsSuccessful = sum(conversionyes),\n    ConversionsFailed = sum(conversionno),\n    team = pos_team,\n  ) -&gt; firstdownsb1g\n\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\n\n\nCode\nfirstdownsb1g |&gt;\n  pivot_longer(\n    cols = starts_with(\"conversions\"),\n    names_to = \"convert\",\n    values_to = \"first\"\n  ) -&gt; firstdownrateb1g\n\nggplot() +\n  geom_bar(\n    data = firstdownrateb1g,\n    aes(x=reorder(team, first),weight = first, fill = convert)\n  ) +\n  coord_flip() + \n  scale_y_continuous(labels=comma) + \n  labs(\n    title=\"The Big Ten's Success of Running on 3rd and Six\",\n)\n\n\n\n\n\n\n\n\n\nNebraska opted to run the most when faced with a 3rd and six, with little success like the rest of the conference from 2019-2024. Maryland is one of the best teams when it comes to converting 3rd and six scenarios on the ground, yet they’ve only achieved four of 17. Some teams, like Minnesota and Michigan State, have failed in every attempt to gain more than six yards on 3rd down and six when rushing.\nWhen Big Ten teams are faced with 3rd and six situations, they opt to pass the ball more than run it. And when they do decide to run it, they often fail to pick up more than the necessary six yard to get a first down. Running the football on 3rd and six normally leads to a fourth down, which could be the difference in a win or loss like Maryland against Illinois last year."
  }
]